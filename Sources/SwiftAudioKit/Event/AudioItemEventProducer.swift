//
//  SwiftAudioKit
//
//  Created by Dionysios Karatzas.
//  Copyright Â© 2024 Dionysios Karatzas. All rights reserved.
//

import Combine
import Foundation

// MARK: - PlayerEventProducer

/// An `AudioItemEventProducer` generates events when a property of an `AudioItem` changes.
class AudioItemEventProducer: EventProducer {
    /// An `AudioItemEvent` is generated by `AudioItemEventProducer` when a property of `AudioItem` changes.
    ///
    /// - updatedArtist: `artist` was updated.
    /// - updatedTitle: `title` was updated.
    /// - updatedAlbum: `album` was updated.
    /// - updatedTrackCount: `trackCount` was updated.
    /// - updatedTrackNumber: `trackNumber` was updated.
    /// - updatedArtwork: `artwork` was updated.
    enum AudioItemEvent: Event {
        case updatedArtist
        case updatedTitle
        case updatedAlbum
        case updatedTrackCount
        case updatedTrackNumber
        case updatedArtwork
    }

    /// The item being observed.
    var item: AudioItem? {
        willSet {
            stopProducingEvents()
        }
    }

    /// The listener that will be alerted when a new event occurs.
    weak var eventListener: EventListener?

    /// Cancellables for Combine subscriptions.
    private var cancellables: Set<AnyCancellable> = []

    /// A boolean value indicating whether we're currently listening to events on the player.
    private var listening = false

    /// Starts listening to the item events.
    func startProducingEvents() {
        guard let item, !listening else {
            return
        }

        func subscribe<T>(_ publisher: Published<T>.Publisher, event: AudioItemEvent) {
            publisher
                .sink { [weak self] _ in
                    guard let self else {
                        return
                    }
                    self.eventListener?.onEvent(event, generatedBy: self)
                }
                .store(in: &cancellables)
        }

        subscribe(item.$artist, event: .updatedArtist)
        subscribe(item.$title, event: .updatedTitle)
        subscribe(item.$album, event: .updatedAlbum)
        subscribe(item.$trackCount, event: .updatedTrackCount)
        subscribe(item.$trackNumber, event: .updatedTrackNumber)
        subscribe(item.$artwork, event: .updatedArtwork)

        listening = true
    }

    /// Stops listening to the item events.
    func stopProducingEvents() {
        guard item != nil, listening else {
            return
        }

        cancellables.removeAll()
        listening = false
    }

    deinit {
        stopProducingEvents()
    }
}
